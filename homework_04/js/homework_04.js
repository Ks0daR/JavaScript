const Priority = {
  LOW: 0,
  NORMAL: 1,
  HIGH: 2,
};

// id: string | integer
// title: string
// body: string
// priority: integer [0-2]

const notepad = {
  notes: [
    'id: string | integer',
    'title:string',
    'body: string',
    'priority: integer',
  ],
  getNotes() {
    return notepad.notes;
  },
  findNoteById(id) {
    /*
       * Ищет заметку в массиве notes
       *
       * Принимает: идентификатор заметки
       * Возвращает: заметку с совпавшим полем id или undefined если ничего не найдено
       */
  },
  saveNote(note) {
    /*
       * Сохраняет заметку в массив notes
       *
       * Принимает: объект заметки
       * Возвращает: сохраненную заметку
       */
  },
  deleteNote(id) {
    /*
       * Удаляет заметку по идентификатору из массива notes
       *
       * Принимает: идентификатор заметки
       * Возвращает: ничего
       */
  },
  updateNoteContent(id, updatedContent) {
    /*
       * Обновляет контент заметки
       * updatedContent - объект с полями вида {имя: значение, имя: значение}
       * Свойств в объекте updatedContent может быть произвольное количество
       *
       * Принимает: идентификатор заметки и объект, полями которого надо обновить заметку
       * Возвращает: обновленную заметку
       */
  },
  updateNotePriority(id, priority) {
    /*
       * Обновляет приоритет заметки
       *
       * Принимает: идентификатор заметки и ее новый приоритет
       * Возвращает: обновленную заметку
       */
  },
  filterNotesByQuery(query) {
    /*
       * Фильтрует массив заметок по подстроке query.
       * Если значение query есть в заголовке или теле заметки - она подходит
       *
       * Принимает: подстроку для поиска в title и body заметки
       * Возвращает: новый массив заметок, контент которых содержит подстроку
       */
  },
  filterNotesByPriority(priority) {
    /*
       * Фильтрует массив заметок по значению приоритета
       * Если значение priority совпадает с приоритетом заметки - она подходит
       *
       * Принимает: приоритет для поиска в свойстве priority заметки
       * Возвращает: новый массив заметок с подходящим приоритетом
       */
  },
};

console.log(notepad.getNotes());
